{"version":3,"sources":["_global.sass","_mixins.sass","_variables.sass","_fonts.sass","blocks/_landing.sass","vendors/_bootstrap_breakpoints.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EAAA;EADlB;IAGI,sBAAsB,EAAA;;AAE1B;ECCE,SAAS;EACT,UAAU;EDAV,kBAAkB;EAClB,+BAA+B,EAAA;;AAEjC;EACE,uBAAuB;EACvB,WAAW;ECGX,+BAA+B;EAC/B,iBDHoB;ECIpB,oBDJ6B;ECK7B,kBAAkB;EAClB,cClBa;EFab,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;EAClB,yBAAyB;EACzB,yBEfU;EFgBV,qBEhBU;EFiBV,mBAAmB;EACnB,kCEbgB,EAAA;EFElB;IAaI,yBAAmC;IACnC,qBErBQ,EAAA;EFOZ;IAgBI,yBAAmC;IACnC,qBExBQ,EAAA;;AF0BZ;EACE,4BAA4B;ECf5B,+BAA+B;EAC/B,iBDeoB;ECdpB,oBDc6B;ECb7B,kBAAkB;EAClB,cCjBa;EF8Bb,yBAAyB;EACzB,mBAAmB;EACnB,mBAAmB,EAAA;;AGlCrB;EACE,yBAAyB;EACzB,yGAAyG;EACzG,kBAAkB,EAAA;;AAEpB;EACE,yBAAyB;EACzB,2GAA2G;EAC3G,gBAAgB;EAChB,kBAAkB,EAAA;;AAEpB;EACE,yBAAyB;EACzB,mGAAmG;EACnG,gBAAgB;EAChB,kBAAkB,EAAA;;AAEpB;EACE,yBAAyB;EACzB,iHAAiH;EACjH,gBAAgB;EAChB,kBAAkB,EAAA;;ACrBpB;EACE,qDAAqD;EACrD,4BAA4B;EAC5B,sBAAsB;EACtB,2BAA2B;EAC3B,qBAAqB,EAAA;ECuDnB;ID5DJ;MAOI,8CAA8C,EAAA,EAqDvB;EAnDzB;IACE,WAAW;IACX,YAAY;IACZ,8CAA8C;IAC9C,4BAA4B;IAC5B,wBAAwB;IACxB,2BAA2B,EAAA;EAE7B;IHFA,+BAA+B;IAC/B,iBGEsB;IHDtB,gBGC2B;IHA3B,kBAAkB;IAClB,cClBa;IEkBX,gBAAgB;IAChB,yBAAyB,EAAA;ICwCzB;MD3CF;QAKI,UAAU;QACV,gBAAgB,EAAA,EAAK;EAEzB;IHVA,+BAA+B;IAC/B,iBGUsB;IHTtB,gBGS2B;IHR3B,kBAAkB;IAClB,cClBa;IE0BX,gBAAgB,EAAA;EAElB;IHdA,+BAA+B;IAC/B,eGcoB;IHbpB,gBGayB;IHZzB,kBAAkB;IAClB,cCnBkB;IE+BhB,gBAAgB;IAChB,mBAAmB;IACnB,yBAAyB,EAAA;IC2BzB;MD/BF;QAMI,eAAe;QACf,gBAAgB,EAAA,EAAK;EAGzB;IHxBA,+BAA+B;IAC/B,iBGwBsB;IHvBtB,oBGuB+B;IHtB/B,kBAAkB;IAClB,cClBa;IEwCX,iBAAiB;IACjB,eAAe;IACf,qBAAqB,EAAA;EAEvB;IACE,eAAe;IACf,gBAAgB,EAAA;ICahB;MDfF;QAII,gBAAgB,EAAA,EAMC;IAVpB;MAMG,UAAU,EAAA;MCSZ;QDfD;UAQK,SAAS,EAAA,EAAK;IARnB;MAUG,YAAY,EAAA;EAEhB;IACE,gBAAgB;IH3ClB,+BAA+B;IAC/B,iBG2CsB;IH1CtB,gBG0C2B;IHzC3B,kBAAkB;IAClB,cClBa;IE2DX,kBAAkB,EAAA","file":"style.css","sourcesContent":["html {\n  font-size: 62.5%;\n  * {\n    box-sizing: border-box; } }\n\nbody {\n  @include resetmargin();\n  position: relative;\n  font-family: \"Lato\", sans-serif; }\n\n.btn-custom {\n  padding: 15px 30px 17px;\n  width: 100%;\n  @include text(1.5rem, initial, $white);\n  line-height: 1.8rem;\n  letter-spacing: -0.3px;\n  text-align: center;\n  text-transform: uppercase;\n  background-color: $ui;\n  border-color: $ui;\n  border-radius: 35px;\n  transition: background-color $transition;\n  &:hover, &:focus {\n    background-color: lighten($ui, 15%);\n    border-color: $ui; }\n  &:not(:disabled):not(.disabled):active {\n    background-color: lighten($ui, 25%);\n    border-color: $ui; } }\n\n.input-custom {\n  padding: 15px 40px 15px 23px;\n  @include text(1.5rem, initial, $black);\n  text-transform: uppercase;\n  line-height: 1.8rem;\n  border-radius: 35px; }\n\n","@mixin resetlist {\n  padding-left: 0;\n  margin: 0;\n  list-style: none; }\n\n@mixin resetmargin {\n  margin: 0;\n  padding: 0; }\n\n@mixin resetinteractive {\n  text-decoration: none;\n  background: none;\n  border: none; }\n\n@mixin text($font-size: 1.8rem, $font-weight: normal, $font-color: $black) {\n  font-family: \"Lato\", sans-serif;\n  font-size: $font-size;\n  font-weight: $font-weight;\n  font-style: normal;\n  color: $font-color; }\n","$main-color: #DDA859;\n$white: #FFFFFF;\n$black: #000000;\n$ui: #DB0707;\n\n$bg-1: #FFF8EF;\n$bg-2: #F4E4F9;\n\n$transition: 350ms;\n","@font-face {\n  font-family: 'Montserrat';\n  src: url(\"../fonts/Lato-Regular.woff2\") format(\"woff2\"), url(\"../fonts/Lato-Regular.woff\") format(\"woff\");\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(\"../fonts/Lato-Semibold.woff2\") format(\"woff2\"), url(\"../fonts/Lato-Semibold.woff\") format(\"woff\");\n  font-weight: 600;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(\"../fonts/Lato-Bold.woff2\") format(\"woff2\"), url(\"../fonts/Lato-Bold.woff\") format(\"woff\");\n  font-weight: 800;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(\"../fonts/Lato-LightItalic.woff2\") format(\"woff2\"), url(\"../fonts/Lato-LightItalic.woff\") format(\"woff\");\n  font-weight: 300;\n  font-style: italic; }\n",".landing {\n  background-image: url('../img/landing-bg-mobile.jpg');\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  padding: 40px 0 135px;\n  @include media-breakpoint-up(md) {\n    background-image: url('../img/landing-bg.jpg'); }\n\n  &__logo {\n    width: 63px;\n    height: 67px;\n    background-image: url('../img/lumos-logo.png');\n    background-repeat: no-repeat;\n    background-size: contain;\n    background-position: center; }\n\n  &__main-title {\n    @include text(1.8rem, 500, $white);\n    margin-top: 32px;\n    text-transform: uppercase;\n    @include media-breakpoint-up(xl) {\n      padding: 0;\n      margin-top: 38px; } }\n\n  &__date {\n    @include text(1.8rem, 500, $white);\n    margin-top: 14px; }\n\n  &__subtitle {\n    @include text(4rem, 600, $main-color);\n    margin-top: 40px;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    @include media-breakpoint-up(xl) {\n      font-size: 6rem;\n      margin-top: 47px; } }\n\n\n  &__text {\n    @include text(2.4rem, initial, $white);\n    line-height: 29px;\n    margin-top: 8px;\n    letter-spacing: 0.3px; }\n\n  &__form {\n    padding: 0 10px;\n    margin-top: 20px;\n    @include media-breakpoint-up(xl) {\n      margin-top: 27px; }\n    .form-group {\n      padding: 0;\n      @include media-breakpoint-up(xl) {\n        margin: 0; } }\n    .btn-custom, .form-group {\n      flex-grow: 1; } }\n\n  &__form-disclaimer {\n    margin-top: 13px;\n    @include text(1.1rem, 300, $white);\n    font-style: italic; } }\n\n\n\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}